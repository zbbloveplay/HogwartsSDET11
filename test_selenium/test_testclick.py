# Generated by Selenium IDE
import pytest
from time import sleep
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestTestclick():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.driver.get("https://testerhome.com/")
        self.driver.implicitly_wait(5)  # 隐式等待
        self.driver.set_window_size(1680, 972)
        self.vars = {}

    def wait(self, timeout, method):
        WebDriverWait(self.driver, timeout).until(method)

    def test_untitled(self):
        self.driver.find_element(By.LINK_TEXT, "社团").click()
        # sleep(2)  # 这种方式不推荐
        # done: 显示等待
        # 尽量使用css_selector，link_text可能导致解析元素时异常
        element = (By.LINK_TEXT, "霍格沃兹测试学院")
        self.wait(10, expected_conditions.element_to_be_clickable(element))  # 这里的element不用拆开
        # visibility_of 可看见
        # element_to_be_clickable 可以被点击
        # self.driver.find_element(By.LINK_TEXT, "霍格沃兹测试学院").click()
        self.driver.find_element(*element).click()  # 使用*符号将元祖拆开

        # sleep(2)
        # done: 隐式等待
        self.driver.find_element(By.CSS_SELECTOR, ".topic-23110 .title > a").click()

    def teardown_method(self, method):
        sleep(20)
        self.driver.quit()

    # def find_element(self, by=By.ID, value=None):
    #     """
    #     Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
    #     possible.
    #
    #     :Usage:
    #         element = driver.find_element(By.ID, 'foo')
    #
    #     :rtype: WebElement
    #     """
    #     if self.w3c:
    #         if by == By.ID:
    #             by = By.CSS_SELECTOR  所有的定位符本质都是CSS定位
    #             value = '[id="%s"]' % value
    #         elif by == By.TAG_NAME:
    #             by = By.CSS_SELECTOR
    #         elif by == By.CLASS_NAME:
    #             by = By.CSS_SELECTOR
    #             value = ".%s" % value
    #         elif by == By.NAME:
    #             by = By.CSS_SELECTOR
    #             value = '[name="%s"]' % value
    #     return self.execute(Command.FIND_ELEMENT, {
    #         'using': by,
    #         'value': value})['value']

    # class By(object):
    #     """
    #     Set of supported locator strategies.
    #     """
    #
    #     ID = "id"
    #     XPATH = "xpath"
    #     LINK_TEXT = "link text"
    #     PARTIAL_LINK_TEXT = "partial link text"
    #     NAME = "name"
    #     TAG_NAME = "tag name"
    #     CLASS_NAME = "class name"
    #     CSS_SELECTOR = "css selector"

    # def until(self, method, message=''):
    #     """Calls the method provided with the driver as an argument until the \
    #     return value is not False."""
    #     screen = None
    #     stacktrace = None
    #
    #     end_time = time.time() + self._timeout
    #     while True:
    #         try:
    #             value = method(self._driver)
    #             if value:
    #                 return value
    #         except self._ignored_exceptions as exc:
    #             screen = getattr(exc, 'screen', None)
    #             stacktrace = getattr(exc, 'stacktrace', None)
    #         time.sleep(self._poll)
    #         if time.time() > end_time:
    #             break
    #     raise TimeoutException(message, screen, stacktrace)
